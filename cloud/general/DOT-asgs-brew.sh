# xxx THIS FILE IS GENERATED BY asgs-brew.pl                                           xxx
# xxx DO NOT CUSTOMIZE THIS FILE, IT WILL BE OVERWRITTEN NEXT TIME asgs-brew.pl IS RUN xxx
export PS1='asgs (none)> '
echo Type \'exit\' to return to the login shell.

# COMMANDS DEFINED AS BASH FUNCTIONS

help() {
echo
echo Commands:
echo "   delete <name>              - deletes named profile"
echo "   edit config                - opens up \$ASGS_CONFIG using \$EDITOR (must be set, if not use the 'set editor' command)"
echo "   list-configs               - lists ASGS configuration files based on year (interactive)"
echo "   list-profiles              - lists all saved profiles that can be specified by load"
echo "   load   <name>              - loads a saved profile by name"
echo "   run                        - runs asgs using config file, \$ASGS_CONFIG must be set (see 'set config'); most handy after 'load'ing a profile"
echo "   save   <name>              - saves an asgs named profile"
echo "   set    <param> \"<value>\"   - sets specified profile variables (i.e., variables that do not last after 'exit')"
echo "     parameters:"
echo "        *  config             - sets ASGS configuration file used by 'run', (\$ASGS_CONFIG)"
echo "        *  editor             - sets default editor, (\$EDITOR)"
echo "        *  scratchdir         - sets ASGS main script directory used by all underlying scripts, (\$SCRATCH)"
echo "        *  scriptdir          - sets ASGS main script directory used by all underlying scripts, (\$SCRIPTDIR)"
echo "        *  workdir            - sets ASGS main script directory used by all underlying scripts, (\$WORK)"
echo "   show   <param>             - shows specified profile variables (i.e., variables that do not last after 'exit')"
echo "     parameters:"
echo "        *  config             - shows ASGS configuration file used by 'run', (\$ASGS_CONFIG)"
echo "        *  editor             - shows what default editor is set to, (\$EDITOR)"
echo "        *  scratchdir         - shows ASGS main script directory used by all underlying scripts, (\$SCRATCH)"
echo "        *  scriptdir          - shows ASGS main script directory used by all underlying scripts, (\$SCRIPTDIR)"
echo "        *  workdir            - shows ASGS main script directory used by all underlying scripts, (\$WORK)"
echo "   sq                         - shortcut for \"squeue -u \$USER\" (if squeue is available)"
echo "   verify                     - verfies Perl and Python environments"
echo "   exit                       - exits ASGS shell, returns \$USER to login shell"
}

list-configs() {
  read -p "Show configs for what year? " year
  if [ -d $SCRIPTDIR/config/$year ]; then
    ls $SCRIPTDIR/config/$year/* | less
  else
    echo ASGS configs for $year do not exist 
  fi
}

delete() {
  if [ -z "${1}" ]; then
    echo \'delete\' requires a name parameter, does NOT unload current profile 
    return
  fi
  NAME=${1}
  if [ -e "$HOME/.asgs/$NAME" ]; then
    rm -f "$HOME/.asgs/$NAME"
    echo deleted \'$NAME\'
  else
    echo no saved profile found
  fi
}

edit() {
  case "${1}" in
  config)
    if [ -z "$ASGS_CONFIG" ]; then
      echo "\$ASGS_CONFIG is not set. Use 'set config' to specify a config file."
      return
    fi
    if [ -z "$EDITOR" ]; then
      echo "\$EDITOR is not set. Use 'set editor' to specify a config file."
      return
    fi
    $EDITOR $ASGS_CONFIG
    ;;
  *)
    echo "Only 'edit config' is supported at this time."
    ;;
  esac
}

list-profiles() {
  if [ ! -d "$HOME/.asgs/" ]; then
    echo no profiles saved
  else
    for profile in $(ls -1 "$HOME/.asgs/" | sort); do
      echo "- $profile"
    done
    return
  fi
}

load() {
  if [ -z "${1}" ]; then
    echo \'load\' requires a name parameter, use \'list-profiles\' to list saved profiles
    return
  fi
  NAME=${1}
  if [ -e "$HOME/.asgs/$NAME" ]; then
    . "$HOME/.asgs/$NAME"
    export PS1="asgs ($NAME)> "
    echo loaded \'$NAME\' into current profile;
  else
    echo no saved profile found
  fi
}

run() {
  if [ -n "${ASGS_CONFIG}" ]; then
    echo "Running ASGS using the config file, '${ASGS_CONFIG}'"
    $SCRIPTDIR/asgs_main.sh -c $ASGS_CONFIG
  else
    echo "ASGS_CONFIG must be set before the 'run' command can be used";  
    return;
  fi
}

save() {
  if [ -z "${1}" ]; then
    echo \'save\' requires a name parameter
    return
  fi
  NAME=${1}
  if [ ! -d $HOME/.asgs ]; then
    mkdir -p $HOME/.asgs
  fi

  if [ -e "$HOME/.asgs/$NAME" ]; then
    IS_UPDATE=1
  fi

  # be very specific about the "profile variables" saved
  echo "export ASGS_CONFIG=${ASGS_CONFIG}" > "$HOME/.asgs/$NAME"
  echo "export EDITOR=${EDITOR}"    >> "$HOME/.asgs/$NAME"
  echo "export SCRATCH=${SCRATCH}"    >> "$HOME/.asgs/$NAME"
  echo "export SCRIPTDIR=${SCRIPTDIR}"    >> "$HOME/.asgs/$NAME"
  echo "export WORK=${WORK}"    >> "$HOME/.asgs/$NAME"
  
  # update prompt
  export PS1="asgs ($NAME)> "

  if [ -n "$IS_UPDATE" ]; then
    echo profile \'$NAME\' was updated
  else
    echo profile \'$NAME\' was written
  fi
}

set() {
  if [ -z "${2}" ]; then
    echo "'set' requires 2 arguments - parameter name and value"
    return 
  fi
  case "${1}" in
  config)
    export ASGS_CONFIG=${2}
    echo "ASGS_CONFIG is set to '${ASGS_CONFIG}'"
    ;;
  editor)
    export EDITOR=${2}
    echo "EDITOR is set to '${EDITOR}'"
    ;;
  scriptdir)
    export SCRIPTDIR=${2} 
    echo "SCRIPTDIR is now set to '${SCRIPTDIR}'"
    ;;
  workdir)
    export WORK=${2} 
    echo "WORK is now set to '${WORK}'"
    ;;
  scratchdir)
    export SCRATCH=${2} 
    echo "SCRATCH is now set to '${SCRATCH}'"
    ;;
  *) echo "'set' requires one of the supported parameters: 'config', 'scriptdir'"
    ;;
  esac 
}

show() {
  if [ -z "${1}" ]; then
    echo "'set' requires 1 argument - parameter"
    return 
  fi
  case "${1}" in
  config)
    if [ -n "${ASGS_CONFIG}" ]; then
      echo "ASGS_CONFIG is set to '${ASGS_CONFIG}'"
    else
      echo "ASGS_CONFIG is not set to anything. Try, 'set config /path/to/asgs/config.sh' first"
    fi
    ;;
  editor)
    if [ -n "${EDITOR}" ]; then
      echo "EDITOR is set to '${EDITOR}'"
    else
      echo "EDITOR is not set to anything. Try, 'set config vi' first"
    fi
    ;;
  scriptdir)
    if [ -n "${SCRIPTDIR}" ]; then
      echo "SCRIPTDIR is set to '${SCRIPTDIR}'"
    else
      echo "SCRIPTDIR is not set to anything. Try, 'set config /path/to/asgs' first"
    fi
    ;;
  workdir)
    if [ -n "${WORK}" ]; then
      echo "WORK is set to '${WORK}'"
    else
      echo "WORK is not set to anything. Try, 'set config /path/to/work' first"
    fi
    ;;
  scratchdir)
    if [ -n "${SCRATCH}" ]; then
      echo "SCRATCH is set to '${SCRATCH}'"
    else
      echo "SCRATCH is not set to anything. Try, 'set config /path/to/scratch' first"
    fi
    ;;
  *) echo "'show' requires one of the supported parameters: 'config', 'scriptdir'"
    ;;
  esac 
}

sq() {
  if [ -n $(which squeue) ]; then
    squeue -u $USER  
  else
    echo The `squeue` utility has not been found in your PATH \(slurm is not available\)
  fi
}

verify() {
  echo verifying Perl Environment:
  which perl
  pushd $SCRIPTDIR > /dev/null 2>&1
  perl $SCRIPTDIR/cloud/general/t/verify-perl-modules.t
  echo verifying Perl scripts can pass compile phase \(perl -c\)
  for file in $(find . -name "*.pl"); do perl -c $file > /dev/null 2>&1 && echo ok     $file || echo not ok $file; done
  which python
  python $SCRIPTDIR/cloud/general/t/verify-python-modules.py && echo Python modules loaded ok
  echo verifying Python scripts can pass compile phase \(python -m py_compile\)
  for file in $(find . -name "*.py"); do
    python -m py_compile $file > /dev/null 2>&1 && echo ok     $file || echo not ok $file;
    # clean up potentially useful *.pyc (compiled python) files
    rm -f ${file}c
  done
  popd > /dev/null 2>&1
}

