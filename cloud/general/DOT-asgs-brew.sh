# xxx THIS FILE IS GENERATED BY asgs-brew.pl                                           xxx
# xxx DO NOT CUSTOMIZE THIS FILE, IT WILL BE OVERWRITTEN NEXT TIME asgs-brew.pl IS RUN xxx
export PS1='asgs> '
echo Type \'exit\' to return to the login shell.

# COMMANDS DEFINED AS BASH FUNCTIONS

help() {
echo
echo Commands:
echo "   configs - lists ASGS configuration files based on year (interactive)"
echo "   load    - loads a saved session (currently only one saved session supported - add ability to load more"
echo "   save    - saves a asgsh session, use 'load' to restore session (supports only saved session -TODO-support more"
echo "   set     - sets specified session variables \(i.e., variables that do not last after 'exit'\)"
echo "     subcommands:"
echo "        * 'config' - sets ASGS configuration file used by 'run'"
echo "   show    - shows specified session variables \(i.e., variables that do not last after 'exit'\)"
echo "     subcommands:"
echo "        * 'config' - shows ASGS configuration file used by 'run'"
echo "   sq      - shortcut for \"squeue -u \$USER\" (if squeue is available)"
echo "   verify  - verfies Perl and Python environments"
echo "   exit    - exits ASGS shell, returns $USER to login shell"
}

configs() {
  read -p "Show configs for what year? " year
  if [ -d $SCRIPTDIR/config/$year ]; then
    ls $SCRIPTDIR/config/$year/* | less
  else
    echo ASGS configs for $year do not exist 
  fi
}

load() {
  if [ -e $HOME/.asgsh.saved ]; then
    source $HOME/.asgsh.saved; 
    echo "existing session loaded";
  else
    echo no saved session found
  fi
}

run() {
  if [ -n "${ASGS_CONFIG}" ]; then
    echo "Running ASGS using the config file, '${ASGS_CONFIG}'"
    $SCRIPTDIR/asgs_main.sh -c $ASGS_CONFIG
  else
    echo "ASGS_CONFIG must be set before the 'run' command can be used";  
    return;
  fi
}

save() {
  if [ -e $HOME/.asgsh.saved ]; then
    echo "existing session overwritten";
  fi
  # be very specific about the "session variables" saved
  if [ -n "${ASGS_CONFIG}" ]; then
    echo "ASGS_CONFIG=${ASGS_CONFIG}" > $HOME/.asgsh.saved
  else
    echo "no session variables found to save..."
  fi
}

set() {
  case "${1}" in
  config)
    if [ -n "${2}" ]; then
      export ASGS_CONFIG=${2}
      echo "ASGS_CONFIG is set to '${ASGS_CONFIG}'"
    else
      echo "'set config' requires a value to assign to ASGS_CONFIG. Use 'show config' to display current value."
      return 
    fi
    ;;
  *) echo "'set' requires a supported subcommand: 'config'"
    ;;
  esac 
}

show() {
  case "${1}" in
  config)
    if [ -n "${ASGS_CONFIG}" ]; then
      echo "ASGS_CONFIG is set to '${ASGS_CONFIG}'"
    else
      echo "ASGS_CONFIG is not set to anything. Try, 'set config /path/to/asgs/config.sh' first"
    fi
    ;;
  *) echo "'show' requires a supported subcommand: 'config'"
    ;;
  esac 
}

sq() {
  if [ -n $(which squeue) ]; then
    squeue -u $USER  
  else
    echo The `squeue` utility has not been found in your PATH \(slurm is not available\)
  fi
}

verify() {
  echo verifying Perl Environment:
  which perl
  pushd $SCRIPTDIR > /dev/null 2>&1
  perl $SCRIPTDIR/cloud/general/t/verify-perl-modules.t
  echo verifying Perl scripts can pass compile phase \(perl -c\)
  for file in $(find . -name "*.pl"); do perl -c $file > /dev/null 2>&1 && echo ok     $file || echo not ok $file; done
  which python
  python $SCRIPTDIR/cloud/general/t/verify-python-modules.py && echo Python modules loaded ok
  echo verifying Python scripts can pass compile phase \(python -m py_compile\)
  for file in $(find . -name "*.py"); do
    python -m py_compile $file > /dev/null 2>&1 && echo ok     $file || echo not ok $file;
    # clean up potentially useful *.pyc (compiled python) files
    rm -f ${file}c
  done
  popd > /dev/null 2>&1
}

